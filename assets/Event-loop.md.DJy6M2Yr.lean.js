import{_ as i,c as a,a1 as e,o as l}from"./chunks/framework.BN1MBF8L.js";const E=JSON.parse('{"title":"事件循环","description":"","frontmatter":{},"headers":[],"relativePath":"Event-loop.md","filePath":"Event-loop.md"}'),t={name:"Event-loop.md"};function n(p,s,h,r,o,k){return l(),a("div",null,s[0]||(s[0]=[e(`<h1 id="事件循环" tabindex="-1">事件循环 <a class="header-anchor" href="#事件循环" aria-label="Permalink to &quot;事件循环&quot;">​</a></h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Event_loop" target="_blank" rel="noreferrer">MDN</a></p><p>JS是单线程的</p><p>之所以称之为<strong>事件循环</strong>，是因为它经常按照类似如下的方式被实现：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (queue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">waitForMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  queue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">processNextMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>queue.waitForMessage()</code> 会同步地等待消息到达 (如果当前没有任何消息等待被处理)。</p><p><img src="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Event_loop/the_javascript_runtime_environment_example.svg" alt=""></p><h3 id="运行时概念" tabindex="-1">运行时概念 <a class="header-anchor" href="#运行时概念" aria-label="Permalink to &quot;运行时概念&quot;">​</a></h3><ul><li><p><strong>执行栈</strong>，函数调用形成了由若干帧堆叠而成的栈</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> baz</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将 42 赋值给 baz</span></span></code></pre></div><ol><li>当调用 <code>bar</code> 时，第一个帧被创建并压入栈中，帧中包含了 <code>bar</code> 的参数引用和局部变量。</li><li>当 <code>bar</code> 调用 <code>foo</code> 时，第二个帧被创建并被压入栈中，放在第一个帧之上，帧中包含 <code>foo</code> 的参数引用和局部变量。</li><li>当 <code>foo</code> 执行完毕然后返回时，第二个帧就被弹出栈（剩下 <code>bar</code> 函数的调用帧）。</li><li>当 <code>bar</code> 也执行完毕然后返回时，第一个帧也被弹出，栈就被清空了。</li></ol><p>注意参数和局部变量可能继续存在，因为它们在栈的外部存储——所以在嵌套函数的外部函数返回后，它们仍能被任意的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Functions#%E5%B5%8C%E5%A5%97%E5%87%BD%E6%95%B0%E5%92%8C%E9%97%AD%E5%8C%85" target="_blank" rel="noreferrer">嵌套函数</a>访问。 <strong>同步代码会被压入执行栈</strong></p></li><li><p><strong>堆</strong>，对象被分配在堆中</p></li><li><p><strong>消息队列（宏任务）</strong>，JS运行时包含一个待处理消息的消息队列，每个消息都关联着一个用以处理这个消息的回调函数</p><ol><li>在<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Event_loop#%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF" target="_blank" rel="noreferrer">事件循环</a>期间的某个时刻，运行时会开始处理最先进入队列的消息。被处理的消息会被移出队列，并作为输入参数来调用与之关联的函数。正如前面所提到的，调用一个函数总是会为其创造一个新的栈帧。</li><li>只有一个消息运行完毕后，才会去运行下一个消息 缺点：一个消息时间过长，页面卡死，无法处理用户交互，例如点击或滚动。 所以要缩短单个消息处理时间，过长的分成好几个消息</li></ol></li></ul><ol><li><strong>同步代码</strong>：首先，执行栈中的同步代码会依次执行，直到执行栈为空。</li><li><strong>异步事件</strong>：当异步事件发生时（如一个网络请求完成），它的回调函数会被添加到任务队列中。</li><li><strong>宏任务（MacroTask）与微任务（MicroTask）</strong>： <ul><li><strong>宏任务</strong>：包括整体代码script，setTimeout，setInterval，setImmediate，I/O，UI rendering，网络请求回调等。</li><li><strong>微任务</strong>：包括process.nextTick（Node.js），Promise，MutationObserver等。</li></ul></li><li><strong>执行顺序</strong>： <ul><li>当执行栈为空时，事件循环会首先检查微任务队列。如果微任务队列中有任务，它们会依次被执行，直到微任务队列为空。</li><li>然后，事件循环会检查宏任务队列，并执行一个宏任务（通常是任务队列中的第一个）。</li><li>执行完一个宏任务后，再次检查微任务队列，重复上述过程。</li></ul></li></ol><h3 id="添加消息" tabindex="-1">添加消息 <a class="header-anchor" href="#添加消息" aria-label="Permalink to &quot;添加消息&quot;">​</a></h3><p>浏览器中，每当一个事件发生，并且有监听器绑定该事件时，一个消息就会被添加进消息队列。如果没有，此事件会丢失</p><ul><li>用户交互产生消息，如用户点击。（如果有代码还在执行，监听操作会正常，监听器的回调函数会被阻塞）</li><li>JS直接触发事件，不会产生消息，会等着当前栈执行完后，直接执行</li></ul><h3 id="settimeout" tabindex="-1">setTimeout <a class="header-anchor" href="#settimeout" aria-label="Permalink to &quot;setTimeout&quot;">​</a></h3><p>函数 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/setTimeout" target="_blank" rel="noreferrer"><code>setTimeout()</code></a> 接受的前两个参数：一个是待加入队列的消息，一个是时间值（可选，默认为 0）</p><ul><li>如果队列中没有其他消息，且栈为空，在延迟事件过去之后，消息会被马上处理。</li><li>如果有其他消息，必须等其他消息处理完</li></ul>`,16)]))}const g=i(t,[["render",n]]);export{E as __pageData,g as default};
